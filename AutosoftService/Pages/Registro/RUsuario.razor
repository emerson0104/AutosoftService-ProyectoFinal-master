@page "/Usuarios"
@page "/Usuarios/{Id:int}"
@using AutosoftService.BLL
@using AutosoftService.Model 

@inject IToastService toast

<EditForm Model="usuarios" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="card w-100">
        <div class="card-header">
            <h3>Registro de Usuarios</h3>
        </div>
        <div class="card-body">
            <form>

                <div class="form-row align-items-center">
                    <div class="col">
                        @*ID*@
                        <div class="form-group">
                            <label>Id</label>
                            <div class="input-group">
                                <InputNumber @bind-Value="usuarios.UsuarioId" class="form-control col-4" />
                                <ValidationMessage For="@(() => usuarios.UsuarioId)"></ValidationMessage>
                                <div class="input-group-append">
                                    <button type="button" class="btn btn-primary" @onclick="Buscar"> <i class="fa fa-search"></i>  Buscar </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                @*Nombres*@
                <div class="form-group">
                    <label>Nombres</label>
                    <InputText @bind-Value="usuarios.Nombre" class="form-control " />
                    <ValidationMessage For="@(() => usuarios.Nombre)" />
                </div>
                @*Apellidos*@
                <div class="form-group">
                    <label>Apellidos</label>
                    <InputText @bind-Value="usuarios.Apellidos" class="form-control " />
                    <ValidationMessage For="@(() => usuarios.Apellidos)" />
                </div>
                @*Email*@
                <div class="form-group">
                    <label>Email</label>
                    <InputText @bind-Value="usuarios.Email" class="form-control " />
                    <ValidationMessage For="@(() => usuarios.Email)" />
                </div>
                @*Nombre de Usuario*@
                <div class="form-group">
                    <label>Nombre de usuario:</label>
                    <InputText @bind-Value="usuarios.Usuario" class="form-control " />
                    <ValidationMessage For="@(() => usuarios.Usuario)" />
                </div>
                @*Rol de Usuario*@
                <div class="form-group">
                    <label>Roles de usuarios</label>
                    <InputSelect @bind-Value="@usuarios.NivelUsuario" class="form-control">
                        <option value="" disabled selected>Seleccione un Rol</option>
                        <option value="Administrador">Administrador</option>
                        <option value="Empleado">Empleado</option>
                        <option value="Normal">Normal</option>
                    </InputSelect>
                    <ValidationMessage For="@(() => usuarios.NivelUsuario)" />
                </div>
                @*Contraseña*@
                <div class="form-group">
                    <label>Clave</label>
                    <InputText type="password" class="form-control " @bind-Value="usuarios.Contrasena"></InputText>
                    <ValidationMessage For="@(() => usuarios.Contrasena)" />
                </div>

                @*confirmar Contraseña*@
                <div class="form-group">
                    <label>Confirmar Clave</label>
                    <InputText type="password" class="form-control " @bind-Value="usuarios.ConfirmarContrasena"></InputText>
                    <ValidationMessage For="@(() => usuarios.ConfirmarContrasena)" />
                </div>
                @*Fecha*@
                <div class="form-group">
                    <label>Fecha</label>
                    <InputDate @bind-Value="usuarios.FechaIngreso" class="form-control "></InputDate>
                    <ValidationMessage For="@(() => usuarios.FechaIngreso)"></ValidationMessage>
                </div>
            </form>
        </div>
            <div class="card-footer">
                <div class="form-group text-center" display: inline-block>
                    <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo"><i class="fa fa-plus"></i> Nuevo </button>
                    <button type="submit" class="btn btn-lg btn-success"><i class="fa fa-save"></i> Guardar </button>
                    <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar"><i class="fa fa-trash"></i> Eliminar </button>
                </div>

            </div>
        </div>

      

</EditForm>


        @code {
            Usuarios usuarios = new Usuarios();

            [Parameter]
            public int Id { get; set; }

            protected override void OnInitialized()
            {
                Nuevo();
                if (Id > 0)
                {
                    var Auxclientes = UsuarioBLL.Buscar(Id);
                    if (Auxclientes != null)
                        this.usuarios = Auxclientes;
                    else
                        toast.ShowWarning("No encontrado.");
                }


            }
            private void Nuevo()
            {
                this.usuarios = new Usuarios();
            }
            private void Guardar()
            {
                bool paso;
                if (usuarios.Contrasena != usuarios.ConfirmarContrasena)
                {
                    usuarios.Contrasena = string.Empty;
                    usuarios.ConfirmarContrasena = string.Empty;
                    toast.ShowWarning("Las Claves No coinciden  !Por favor Intente de Nuevo");
                }
                else
                {
                    paso = UsuarioBLL.Guardar(usuarios);
                    if (paso)
                    {

                        Nuevo();
                        toast.ShowSuccess("Guardado Correctamente");
                    }
                    else
                    {
                        toast.ShowError("No fue posible guardar");
                    }
                }

            }

            private void Buscar()
            {
                var encontrado = UsuarioBLL.Buscar(usuarios.UsuarioId);
                if (encontrado != null)
                {

                    this.usuarios = encontrado;
                }
                else
                {
                    toast.ShowWarning("No encontrado");
                }
            }

            private void Eliminar()
            {
                bool eliminar;

                eliminar = UsuarioBLL.Eliminar(usuarios.UsuarioId);

                if (eliminar)
                {
                    Nuevo();
                    toast.ShowSuccess("Eliminado Correctamente");
                }
                else
                {
                    toast.ShowError("No fue posible eliminar");
                }
            }

        }
